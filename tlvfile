#!/usr/bin/python3
# Copyright (c) 2020 Gareth Palmer <gareth.palmer3@gmail.com>
# This program is free software, distributed under the terms of
# the GNU General Public License Version 2.

import sys
import os
import os.path
import struct
import binascii
from datetime import datetime
import time
import getopt
import traceback

from cryptography.exceptions import InvalidSignature
import cryptography.hazmat.backends as backends
import cryptography.x509 as x509
import cryptography.x509.oid as oid
from cryptography.hazmat.primitives import hashes, serialization
from cryptography.hazmat.primitives.asymmetric import padding
import cryptography.hazmat.primitives.asymmetric.rsa as rsa
import cryptography.hazmat.primitives.asymmetric.ec as ec
import asn1crypto.core as asn1


HEADER_VERSION = 1
HEADER_LENGTH = 2
HEADER_SIGNER_ID = 3
HEADER_SIGNER_NAME = 4
HEADER_SERIAL_NUMBER = 5
HEADER_CA_NAME = 6
HEADER_SIGNATURE_INFO = 7
HEADER_DIGEST_ALGORITHM = 8
HEADER_SIGNATURE_ALGORITHM_INFO = 9
HEADER_SIGNATURE_ALGORITHM = 10
HEADER_SIGNATURE_MODULUS = 11
HEADER_SIGNATURE = 12
HEADER_PADDING = 13
HEADER_FILENAME = 14
HEADER_TIMESTAMP = 15
HEADER_SIGNER_VERSION = 28

RECORD_LENGTH = 1
RECORD_DNS_NAME = 2
RECORD_SUBJECT_NAME = 3
RECORD_FUNCTION = 4
RECORD_ISSUER_NAME = 5
RECORD_SERIAL_NUMBER = 6
RECORD_PUBLIC_KEY = 7
RECORD_SIGNATURE = 8
RECORD_CERTIFICATE = 9
RECORD_IP_ADDRESS = 10
RECORD_CERTIFICATE_HASH = 11
RECORD_HASH_ALGORITHM = 12

DIGEST_SHA1 = 1
DIGEST_SHA256 = 2
DIGEST_SHA348 = 3
DIGEST_SHA512 = 4

FUNCTION_SAST = 0
FUNCTION_CCM = 1
FUNCTION_CCM_TFTP = 2
FUNCTION_TFTP = 3
FUNCTION_CAPF = 4
FUNCTION_HTTPS = 7
FUNCTION_TVS = 21


class ProgramError(Exception):
    pass


def parse_tlv(tlv_file):
    try:
        with open(tlv_file, 'rb') as file:
            tlv_data = file.read()

    except (PermissionError, FileNotFoundError, IsADirectoryError) as error:
        raise ProgramError(f'{error.strerror}: {error.filename}')

    tlv_index = 0

    (tag, length) = struct.unpack_from('> B H', tlv_data, tlv_index)
    tlv_index += 3

    if tag != HEADER_VERSION:
        raise ProgramError(f'Tag is not HEADER_VERSION: {tag}')

    if length != 2:
        raise ProgramError(f'Unsupported length for HEADER_VERSION: {length}')

    (major, minor) = struct.unpack_from('B B', tlv_data, tlv_index)
    tlv_index += length

    version = f'{major}.{minor}'
    print(f'Version:          {version}')

    (tag, length) = struct.unpack_from('> B H', tlv_data, tlv_index)
    tlv_index += 3

    if tag != HEADER_LENGTH:
        raise ProgramError(f'Tag is not HEADER_LENGTH: {tag}')

    if length != 2:
        raise ProgramError(f'Unsupported length for HEADER_LENGTH: {length}')

    (header_length,) = struct.unpack_from('> H', tlv_data, tlv_index)
    tlv_index += length

    print(f'Header Length:    {header_length} bytes')

    header_serial_number = None
    header_digest_algorithm = None
    header_certificate = None

    header_signature_index = 0
    header_signature_length = 0

    while tlv_index < header_length:
        (tag,) = struct.unpack_from('B', tlv_data, tlv_index)
        tlv_index += 1

        if tag == HEADER_PADDING:
            continue

        (length,) = struct.unpack_from('> H', tlv_data, tlv_index)
        tlv_index += 2

        if tag == HEADER_SIGNER_VERSION:
            if length != 2:
                raise ProgramError(f'Unsupported length for HEADER_SIGNER_VERSION: {length}')

            (major, minor) = struct.unpack_from('B B', tlv_data, tlv_index)
            tlv_index += length

            print(f'Signer Version:   {major}.{minor}')

        elif tag == HEADER_SIGNER_ID:
            continue

        elif tag == HEADER_SIGNER_NAME:
            signer_name = tlv_data[tlv_index:tlv_index + length]
            tlv_index += length

            signer_name = signer_name[:-1].decode('utf-8')

            print(f'Signer Name:      {signer_name}')

        elif tag == HEADER_SERIAL_NUMBER:
            serial_number = binascii.hexlify(tlv_data[tlv_index:tlv_index + length])
            tlv_index += length

            serial_number = serial_number.decode('utf-8')

            print(f'Serial Number:    {serial_number}')

            header_serial_number = serial_number

        elif tag == HEADER_CA_NAME:
            ca_name = tlv_data[tlv_index:tlv_index + length]
            tlv_index += length

            ca_name = ca_name[:-1].decode('utf-8')

            print(f'CA Name:          {ca_name}')

        elif tag == HEADER_SIGNATURE_INFO:
            continue

        elif tag == HEADER_DIGEST_ALGORITHM:
            if length != 1:
                raise ProgramError(f'Unsupported length for HEADER_DIGEST_ALGORITHM: {length}')

            (digest_algorithm,) = struct.unpack_from('B', tlv_data, tlv_index)
            tlv_index += length

            print(f'Digest Algorithm: ', end = '')

            if digest_algorithm == DIGEST_SHA1:
                print('SHA1')
            elif digest_algorithm == DIGEST_SHA512:
                print('SHA512')
            else:
                print(f'{digest_algorithm}')

            header_digest_algorithm = digest_algorithm

        elif tag == HEADER_SIGNATURE_ALGORITHM_INFO:
            continue

        elif tag == HEADER_SIGNATURE_ALGORITHM:
            if length != 1:
                raise ProgramError(f'Unsupported length for HEADER_SIGNATURE_ALGORITHM: {length}')

            (signature_algorithm,) = struct.unpack_from('B', tlv_data, tlv_index)
            tlv_index += length

        elif tag == HEADER_SIGNATURE_MODULUS:
            if length != 1:
               raise ProgramError(f'Unsupported length for HEADER_SIGNATURE_MODULUS: {length}')

            (signature_modulus,) = struct.unpack_from('B', tlv_data, tlv_index)
            tlv_index += length

        elif tag == HEADER_SIGNATURE:
            signature = tlv_data[tlv_index:tlv_index + length]
            tlv_index += length

            print(f'Signature:        {length} bytes')

            header_signature_index = tlv_index - 3 - length
            header_signature_length = length

        elif tag == HEADER_FILENAME:
            filename = tlv_data[tlv_index:tlv_index + length]
            tlv_index += length

            filename = filename[:-1].decode('utf-8')

            print(f'Filename:         {filename}')

        elif tag == HEADER_TIMESTAMP:
            if length != 4:
                raise ProgramError(f'Unsupported length for HEADER_TIMESTAMP: {length}')

            (timestamp,) = struct.unpack_from('> I', tlv_data, tlv_index)
            tlv_index += length

            timestamp = datetime.fromtimestamp(timestamp)

            print(timestamp.strftime('Timestamp:        %Y-%m-%d %H:%M:%S'))

        else:
            raise ProgramError(f'Unknown HEADER tag: {tag}')

    print('')

    if header_serial_number is None:
        raise ProgramError(f'Missing HEADER_SERIAL_NUMBER')

    if header_digest_algorithm is None:
        raise ProgramError(f'Missing HEADER_DIGEST_ALGORITHM')

    if header_digest_algorithm not in (DIGEST_SHA1, DIGEST_SHA512):
        raise ProgramError(f'Unsupported HEADER_DIGEST_ALGORITHM: {header_digest_algorithm}')

    if header_signature_index is None:
        raise ProgramError('Missing HEADER_SIGNATURE')

    while tlv_index < len(tlv_data):
        record_index = tlv_index

        (tag, length) = struct.unpack_from('> B H', tlv_data, tlv_index)
        tlv_index += 3

        if tag != RECORD_LENGTH:
            raise ProgramError(f'Tag is not RECORD_LENGTH: {tag}')

        if length != 2:
            raise ProgramError(f'Unsupported length for RECORD_LENGTH: {length}')

        (record_length,) = struct.unpack_from('> H', tlv_data, tlv_index)
        tlv_index += length

        print(f'Record Length:    {record_length} bytes')

        record_function = None
        record_serial_number = None
        record_certificate = None

        while tlv_index < record_index + record_length:
            (tag, length) = struct.unpack_from('> B H', tlv_data, tlv_index)
            tlv_index += 3

            if tag == RECORD_DNS_NAME:
                dns_name = tlv_data[tlv_index:tlv_index + length]
                tlv_index += length

                dns_name = dns_name[:-1].decode('utf-8')

                print(f'DNS Name:         {dns_name}')

            elif tag == RECORD_SUBJECT_NAME:
                subject_name = tlv_data[tlv_index:tlv_index + length]
                tlv_index += length

                subject_name = subject_name[:-1].decode('utf-8')

                print(f'Subject Name:     {subject_name}')

            elif tag == RECORD_FUNCTION:
                if length != 2:
                    raise ProgramError(f'Unsupported length for RECORD_FUNCTION: {length}')

                (function,) = struct.unpack_from('> H', tlv_data, tlv_index)
                tlv_index += length

                print(f'Function:         ', end = '')

                if function == FUNCTION_SAST:
                    print('SAST')
                elif function == FUNCTION_CCM:
                    print('CCM')
                elif function == FUNCTION_CCM_TFTP:
                    print('CCM+TFTP')
                elif function == FUNCTION_TFTP:
                    print('TFTP')
                elif function == FUNCTION_CAPF:
                    print('CAPF')
                elif function == FUNCTION_HTTPS:
                    print('HTTPS')
                elif function == FUNCTION_TVS:
                    print('TVS')
                else:
                    print(f'{function}')

                record_function = function

            elif tag == RECORD_ISSUER_NAME:
                issuer_name = tlv_data[tlv_index:tlv_index + length]
                tlv_index += length

                issuer_name = issuer_name[:-1].decode('utf-8')

                print(f'Issuer Name:      {issuer_name}')

            elif tag == RECORD_SERIAL_NUMBER:
                serial_number = binascii.hexlify(tlv_data[tlv_index:tlv_index + length])
                tlv_index += length

                serial_number = serial_number.decode('utf-8')

                print(f'Serial Numer:     {serial_number}')

                record_serial_number = serial_number

            elif tag == RECORD_PUBLIC_KEY:
                public_key = tlv_data[tlv_index:tlv_index + length]
                tlv_index += length

                print(f'Public Key:       {length} bytes')

            elif tag == RECORD_SIGNATURE:
                signature = tlv_data[tlv_index:tlv_index + length]
                tlv_index += length

                print(f'Signature:        {length} bytes')

            elif tag == RECORD_CERTIFICATE:
                certificate = tlv_data[tlv_index:tlv_index + length]
                tlv_index += length

                print(f'Certificate:      {length} bytes')

                try:
                    certificate = x509.load_der_x509_certificate(certificate, backends.default_backend())
                except ValueError:
                    raise ProgramError('Invalid certificate')

                public_key = certificate.public_key()

                if isinstance(public_key, rsa.RSAPublicKey):
                    print('Key Algorithm:    RSA')
                elif isinstance(public_key, ec.EllipticCurvePublicKey):
                    print('Key Algorithm:    EllipticCurve')
                else:
                    raise ProgramError('Unsupported RECORD_CERTIFICATE type')

                if header_digest_algorithm == DIGEST_SHA1:
                    hash = hashes.SHA1()
                elif header_digest_algorithm == DIGEST_SHA512:
                    hash = hashes.SHA512()

                certificate_hash = binascii.hexlify(certificate.fingerprint(hash)).decode('utf-8')

                print(f'Certificate Hash: {certificate_hash}')

                record_certificate = certificate

            elif tag in (RECORD_IP_ADDRESS, RECORD_CERTIFICATE_HASH, RECORD_HASH_ALGORITHM):
                tlv_index += length

            else:
                raise ProgramError(f'Unknown RECORD tag: {tag}')

        if record_function == FUNCTION_SAST and record_serial_number == header_serial_number:
            header_certificate = record_certificate

        print('')

    if header_certificate is None:
        raise ProgramError('Missing RECORD with FUNCTION_SAST')

    public_key = header_certificate.public_key()

    if header_digest_algorithm == DIGEST_SHA1:
        hash = hashes.SHA1()
    elif header_digest_algorithm == DIGEST_SHA512:
        hash = hashes.SHA512()

    signature = tlv_data[header_signature_index + 3:header_signature_index + 3 + header_signature_length]
    content = tlv_data[:header_signature_index] + tlv_data[header_signature_index + 3 + header_signature_length:]

    try:
        public_key.verify(signature, content, padding.PKCS1v15(), hash)

    except InvalidSignature:
        print('Invalid signature')
        return

    print('Valid signature')


class RSAPublicNumbers(asn1.Sequence):
    _fields = [
        ('n', asn1.Integer),
        ('e', asn1.Integer)
    ]


oid_names = {
    oid.NameOID.COMMON_NAME: 'CN',
    oid.NameOID.ORGANIZATION_NAME: 'O',
    oid.NameOID.ORGANIZATIONAL_UNIT_NAME: 'OU',
    oid.NameOID.LOCALITY_NAME: 'L',
    oid.NameOID.STATE_OR_PROVINCE_NAME: 'ST',
    oid.NameOID.COUNTRY_NAME: 'C'
}


def build_tlv(tlv_file, certificate_file, version, digest_algorithm, filename, records):
    try:
        with open(certificate_file, 'rb') as file:
            content = file.read()

    except (PermissionError, FileNotFoundError, IsADirectoryError) as error:
        raise ProgramError(f'{error.strerror}: {error.filename}')

    try:
        certificate = x509.load_pem_x509_certificate(content, backends.default_backend())
    except ValueError:
        raise ProgramError(f'No certificate in file: {certificate_file}')

    try:
        private_key = serialization.load_pem_private_key(content, None, backends.default_backend())
    except ValueError:
        raise ProgramError(f'No private key in file: {certificate_file}')

    header_signature_length = private_key.key_size // 8

    tlv_data = bytearray()
    tlv_data += struct.pack('> B H B B', HEADER_VERSION, 2, 1, 2)

    header_length_index = len(tlv_data)
    tlv_data += struct.pack('> B H H', HEADER_LENGTH, 2, 0)

    (major, minor) = version.split('.')
    tlv_data += struct.pack('> B H B B', HEADER_SIGNER_VERSION, 2, int(major), int(minor))

    signer_name = ''

    for attribute in certificate.subject:
        if attribute.oid not in oid_names:
            continue

        signer_name += (';' if len(signer_name) else '') + oid_names[attribute.oid] + '=' + attribute.value

    signer_name = signer_name.encode('utf-8') + b'\x00'
    ca_name = ''

    for attribute in certificate.issuer:
        if attribute.oid not in oid_names:
            continue

        ca_name += (';' if len(ca_name) else '') + oid_names[attribute.oid] + '=' + attribute.value

    ca_name = ca_name.encode('utf-8') + b'\x00'

    serial_number = certificate.serial_number
    serial_number = serial_number.to_bytes((serial_number.bit_length() + 7) // 8, byteorder = 'big')

    signer_id = 3 + len(signer_name) + 3 + len(serial_number) + 3 + len(ca_name)
    tlv_data += struct.pack('> B H', HEADER_SIGNER_ID, signer_id)

    tlv_data += struct.pack('> B H', HEADER_SIGNER_NAME, len(signer_name))
    tlv_data += signer_name

    tlv_data += struct.pack('> B H', HEADER_SERIAL_NUMBER, len(serial_number))
    tlv_data += serial_number

    tlv_data += struct.pack('> B H', HEADER_CA_NAME, len(ca_name))
    tlv_data += ca_name

    tlv_data += struct.pack('> B H', HEADER_SIGNATURE_INFO, 15)
    tlv_data += struct.pack('> B H', HEADER_DIGEST_ALGORITHM, 1)

    if digest_algorithm == 'sha1':
        tlv_data += struct.pack('B', DIGEST_SHA1)
    elif digest_algorithm == 'sha512':
        tlv_data += struct.pack('B', DIGEST_SHA512)
    else:
        raise ProgramError(f'Unsupported HEADER_DIGEST_ALGORITHM: {digest_algorithm}')

    tlv_data += struct.pack('> B H', HEADER_SIGNATURE_ALGORITHM_INFO, 8)
    tlv_data += struct.pack('> B H B', HEADER_SIGNATURE_ALGORITHM, 1, 0)
    tlv_data += struct.pack('> B H', HEADER_SIGNATURE_MODULUS, 1)

    if header_signature_length == 64:
        tlv_data += struct.pack('B', 0)
    elif header_signature_length == 128:
        tlv_data += struct.pack('B', 1)
    elif header_signature_length == 256:
        tlv_data += struct.pack('B', 2)
    elif header_signature_length == 512:
        tlv_data += struct.pack('B', 3)
    else:
        raise ProgramError(f'Unsupported HEADER_SIGNATURE_MODULUS: {header_signature_length}')

    # Index where the signature will be inserted
    header_signature_index = len(tlv_data)

    filename = filename.encode('utf-8') + b'\x00'

    tlv_data += struct.pack('> B H', HEADER_FILENAME, len(filename))
    tlv_data += filename

    tlv_data += struct.pack('> B H I', HEADER_TIMESTAMP, 4, int(time.time()))

    # Pad to 4 byte boundary
    while (len(tlv_data) + 3 + header_signature_length) % 4:
        tlv_data += struct.pack('B', HEADER_PADDING)

    header_length = len(tlv_data) + 3 + header_signature_length
    struct.pack_into('> H', tlv_data, header_length_index + 3, header_length)

    for certificate_file, function in records:
        try:
            with open(certificate_file, 'rb') as file:
                content = file.read()

        except (PermissionError, FileNotFoundError, IsADirectoryError) as error:
            raise ProgramError(f'{error.strerror}: {error.filename}')

        try:
            certificate = x509.load_pem_x509_certificate(content, backends.default_backend())
        except ValueError:
            raise ProgramError(f'No certificate in file: {certificate_file}')

        record_length_index = len(tlv_data)
        tlv_data += struct.pack('> B H H', RECORD_LENGTH, 2, 0)

        subject_name = ''

        for attribute in certificate.subject:
            if attribute.oid not in oid_names:
                continue

            subject_name += (';' if len(subject_name) else '') + oid_names[attribute.oid] + '=' + attribute.value

        subject_name = subject_name.encode('utf-8') + b'\x00'

        tlv_data += struct.pack('> B H', RECORD_SUBJECT_NAME, len(subject_name))
        tlv_data += subject_name

        tlv_data += struct.pack('> B H', RECORD_FUNCTION, 2)

        if function == 'sast':
            tlv_data += struct.pack('> H', FUNCTION_SAST)
        elif function == 'ccm':
            tlv_data += struct.pack('> H', FUNCTION_CCM)
        elif function == 'ccm+tftp':
            tlv_data += struct.pack('> H', FUNCTION_CCM_TFTP)
        elif function == 'tftp':
            tlv_data += struct.pack('> H', FUNCTION_TFTP)
        elif function == 'capf':
            tlv_data += struct.pack('> H', FUNCTION_CAPF)
        elif function == 'https':
            tlv_data += struct.pack('> H', FUNCTION_HTTPS)
        elif function == 'tvs':
            tlv_data += struct.pack('> H', FUNCTION_TVS)
        else:
            raise ProgramError(f'Unsupported RECORD_FUNCTION: {function}')

        issuer_name = ''

        for attribute in certificate.issuer:
            if attribute.oid not in oid_names:
                continue

            issuer_name += (';' if len(issuer_name) else '') + oid_names[attribute.oid] + '=' + attribute.value

        issuer_name = issuer_name.encode('utf-8') + b'\x00'
        tlv_data += struct.pack('> B H', RECORD_ISSUER_NAME, len(issuer_name)) + issuer_name

        serial_number = certificate.serial_number
        serial_number = serial_number.to_bytes((serial_number.bit_length() + 7) // 8, byteorder = 'big')

        tlv_data += struct.pack('> B H', RECORD_SERIAL_NUMBER, len(serial_number))
        tlv_data += serial_number

        public_key = certificate.public_key()

        if isinstance(public_key, rsa.RSAPublicKey):
            public_numbers = public_key.public_numbers()
            public_key = RSAPublicNumbers({'n': public_numbers.n, 'e': public_numbers.e}).dump()
        elif isinstance(public_key, ec.EllipticCurvePublicKey):
            public_key = public_key.public_bytes(serialization.Encoding.X962, serialization.PublicFormat.UncompressedPoint)
        else:
            raise ProgramError('Unsupported certificate PUBLIC_KEY type')

        tlv_data += struct.pack('> B H', RECORD_PUBLIC_KEY, len(public_key))
        tlv_data += public_key

        signature = certificate.signature

        tlv_data += struct.pack('> B H', RECORD_SIGNATURE, len(signature))
        tlv_data += signature

        certificate = certificate.public_bytes(serialization.Encoding.DER)

        tlv_data += struct.pack('> B H', RECORD_CERTIFICATE, len(certificate))
        tlv_data += certificate

        record_length = len(tlv_data) - record_length_index
        struct.pack_into('> H', tlv_data, record_length_index + 3, record_length)

    if digest_algorithm == 'sha1':
        hash = hashes.SHA1()
    elif digest_algorithm == 'sha512':
        hash = hashes.SHA512()
    else:
        raise ProgramError(f'Unsupported DIGEST_ALGORITHM: {hash}')

    tlv_data = bytes(tlv_data)
    signature = private_key.sign(tlv_data, padding.PKCS1v15(), hash)

    content = tlv_data[:header_signature_index]
    content += struct.pack('> B H', HEADER_SIGNATURE, len(signature))
    content += signature
    content += tlv_data[header_signature_index:]

    try:
        with open(tlv_file, 'wb') as file:
            file.write(content)

    except (PermissionError, IsADirectoryError) as error:
        raise ProgramError(f'{error.strerror}: {error.filename}')

    print(f'Built {tlv_file}')


def main():
    short_options = 'pbs:v:d:F:r:f:H'
    long_options = ['parse', 'build', 'sast=', 'version=', 'digest=', 'filename=', 'record=', 'function=', 'help']

    mode = None
    tlv_file = None
    certificate_file = None
    version = '1.0'
    digest_algorithm = 'sha1'
    filename = None
    record = None
    function = None
    records = []
    help = False

    try:
        options, arguments = getopt.gnu_getopt(sys.argv[1:], short_options, long_options)
    except getopt.GetoptError as error:
        raise ProgramError(error.msg[0].upper() + error.msg[1:] +
                           '. Try \'' + os.path.basename(sys.argv[0]) + ' --help\' for more information')

    for option, argument in options:
        if option in ('-p', '--parse'):
            mode = 'parse'

        elif option in ('-b', '--build'):
            mode = 'build'

        elif option in ('-s', '--sast'):
            certificate_file = argument

        elif option in ('-v', '--version'):
            if argument not in ('1.0', '1.1'):
                raise ProgramError(f'Invalid version: {argument}')

            version = argument

        elif option in ('-d', '--digest'):
            if argument not in ('sha1', 'sha512'):
                raise ProgramError(f'Invalid digest: {argument}')

            digest_algorithm = argument

        elif option in ('-F', '--filename'):
            filename = argument

        elif option in ('-r', '--record'):
            record = argument

        elif option in ('-f', '--function'):
            if argument not in ('sast', 'ccm', 'tftp', 'ccm+tftp', 'https', 'tvs', 'capf'):
                raise ProgramError(f'Invalid function: {argument}')

            if record is None:
                raise ProgramError(f'No record certificate supplied for {argument}')

            function = argument
            records.append((record, function))

        elif option in ('-H', '--help'):
            help = True

    if help:
        print('Usage: ' + os.path.basename(sys.argv[0]) + ' [OPTIONS] TLV-FILE\n'
              'Parse or build .tlv files\n'
              '\n'
              '  -p, --parse                    parse the specified .tlv file\n'
              '  -b, --build                    build new .tlv file using options below\n'
              '  -s, --sast CERT-FILE           signing certificate with sast role\n'
              '  -v, --version VERSION          signer version: 1.0 or 1.1 (default 1.0)\n'
              '  -d, --digest ALGORITHM         digest algorithm for signature: sha1 or sha512 (default sha1)\n'
              '  -F, --filename NAME            file name to store in .tlv header\n'
              '  -r, --record CERT-FILE         additional record certificate, can be specified more than once\n'
              '  -f, --function FUNCTION        function for preceeding record: sast, ccm, ccm+tftp, tftp, https, tvs or capf\n'
              '  -H, --help                     print this help and exit\n')

        return

    if mode is None:
        raise ProgramError('No mode specified (either parse or build). Try --help')

    if len(arguments):
        tlv_file = arguments[0]

    if tlv_file is None:
        raise ProgramError('No .tlv file specified')

    if mode == 'parse':
        parse_tlv(tlv_file)

    elif mode == 'build':
        if certificate_file is None:
            raise ProgramError('No certificate .pem file specified')

        if not len(records):
            raise ProgramError('No record certificates specified')

        if filename is None:
            filename = os.path.basename(tlv_file)

        # Add the signing certificate in the SAST role
        records.insert(0, (certificate_file, 'sast'))
        build_tlv(tlv_file, certificate_file, version, digest_algorithm, filename, records)


if __name__ == '__main__':
    try:
        main()

    except ProgramError as error:
        print(str(error), file = sys.stderr)
        exit(1)

    except Exception:
        traceback.print_exc(file = sys.stderr)
        exit(1)

    exit(0)
