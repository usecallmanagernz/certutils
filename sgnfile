#!/usr/bin/python3
# Copyright (c) 2020 Gareth Palmer <gareth.palmer3@gmail.com>
# This program is free software, distributed under the terms of
# the GNU General Public License Version 2.

import sys
import os
import os.path
import struct
import binascii
from datetime import datetime
import time
import getopt
import traceback

from cryptography.exceptions import InvalidSignature
import cryptography.hazmat.backends as backends
import cryptography.x509 as x509
import cryptography.x509.oid as oid
from cryptography.hazmat.primitives import hashes, serialization
from cryptography.hazmat.primitives.asymmetric import padding


HEADER_VERSION = 1
HEADER_LENGTH = 2
HEADER_SIGNER_ID = 3
HEADER_SIGNER_NAME = 4
HEADER_SERIAL_NUMBER = 5
HEADER_CA_NAME = 6
HEADER_SIGNATURE_INFO = 7
HEADER_DIGEST_ALGORITHM = 8
HEADER_SIGNATURE_ALGORITHM_INFO = 9
HEADER_SIGNATURE_ALGORITHM = 10
HEADER_SIGNATURE_MODULUS = 11
HEADER_SIGNATURE = 12
HEADER_PADDING = 13
HEADER_FILENAME = 14
HEADER_TIMESTAMP = 15

DIGEST_SHA1 = 1
DIGEST_SHA256 = 2
DIGEST_SHA512 = 3


class ProgramError(Exception):
    pass


def parse_sgn(sgn_file, certificate_file):
    try:
        with open(sgn_file, 'rb') as file:
            tlv_data = file.read()

    except (PermissionError, FileNotFoundError, IsADirectoryError) as error:
        raise ProgramError(f'{error.strerror}: {error.filename}')

    tlv_index = 0

    (tag, length) = struct.unpack_from('> B H', tlv_data, tlv_index)
    tlv_index += 3

    if tag != HEADER_VERSION:
        raise ProgramError(f'Tag is not HEADER_VERSION: {tag}')

    if length != 2:
        raise ProgramError(f'Unsupported length for HEADER_VERSION: {length}')

    (major, minor) = struct.unpack_from('B B', tlv_data, tlv_index)
    tlv_index += length

    version = f'{major}.{minor}'
    print(f'Version:          {version}')

    (tag, length) = struct.unpack_from('> B H', tlv_data, tlv_index)
    tlv_index += 3

    if tag != HEADER_LENGTH:
        raise ProgramError(f'Tag is not HEADER_LENGTH: {tag}')

    if length != 2:
        raise ProgramError(f'Unsupported length for HEADER_LENGTH: {length}')

    (header_length,) = struct.unpack_from('> H', tlv_data, tlv_index)
    tlv_index += length

    print(f'Header Length:    {header_length} bytes')

    header_serial_number = None
    header_digest_algorithm = None

    header_signature_index = 0
    header_signature_length = 0

    while tlv_index < header_length:
        (tag,) = struct.unpack_from('B', tlv_data, tlv_index)
        tlv_index += 1

        if tag == HEADER_PADDING:
            continue

        (length,) = struct.unpack_from('> H', tlv_data, tlv_index)
        tlv_index += 2

        if tag == HEADER_SIGNER_ID:
            continue

        elif tag == HEADER_SIGNER_NAME:
            signer_name = tlv_data[tlv_index:tlv_index + length]
            tlv_index += length

            signer_name = signer_name[:-1].decode('utf-8')

            print(f'Signer Name:      {signer_name}')

        elif tag == HEADER_SERIAL_NUMBER:
            serial_number = binascii.hexlify(tlv_data[tlv_index:tlv_index + length])
            tlv_index += length

            serial_number = serial_number.decode('utf-8')

            print(f'Serial Number:    {serial_number}')

            header_serial_number = serial_number

        elif tag == HEADER_CA_NAME:
            ca_name = tlv_data[tlv_index:tlv_index + length]
            tlv_index += length

            ca_name = ca_name[:-1].decode('utf-8')

            print(f'CA Name:          {ca_name}')

        elif tag == HEADER_SIGNATURE_INFO:
            continue

        elif tag == HEADER_DIGEST_ALGORITHM:
            if length != 1:
                raise ProgramError(f'Unsupported length for HEADER_DIGEST_ALGORITHM: {length}')

            (digest_algorithm,) = struct.unpack_from('B', tlv_data, tlv_index)
            tlv_index += length

            print(f'Digest Algorithm: ', end = '')

            if digest_algorithm == DIGEST_SHA1:
                print('SHA1')
            elif digest_algorithm == DIGEST_SHA512:
                print('SHA512')
            else:
                print(f'{digest_algorithm}')

            header_digest_algorithm = digest_algorithm

        elif tag == HEADER_SIGNATURE_ALGORITHM_INFO:
            continue

        elif tag == HEADER_SIGNATURE_ALGORITHM:
            if length != 1:
                raise ProgramError(f'Unsupported length for HEADER_SIGNATURE_ALGORITHM: {length}')

            (signature_algorithm,) = struct.unpack_from('B', tlv_data, tlv_index)
            tlv_index += length

        elif tag == HEADER_SIGNATURE_MODULUS:
            if length != 1:
               raise ProgramError(f'Unsupported length for HEADER_SIGNATURE_MODULUS: {length}')

            (signature_modulus,) = struct.unpack_from('B', tlv_data, tlv_index)
            tlv_index += length

        elif tag == HEADER_SIGNATURE:
            signature = tlv_data[tlv_index:tlv_index + length]
            tlv_index += length

            print(f'Signature:        {length} bytes')

            header_signature_index = tlv_index - 3 - length
            header_signature_length = length

        elif tag == HEADER_FILENAME:
            filename = tlv_data[tlv_index:tlv_index + length]
            tlv_index += length

            filename = filename[:-1].decode('utf-8')

            print(f'Filename:         {filename}')

        elif tag == HEADER_TIMESTAMP:
            if length != 4:
                raise ProgramError(f'Unsupported length for HEADER_TIMESTAMP: {length}')

            (timestamp,) = struct.unpack_from('> I', tlv_data, tlv_index)
            tlv_index += length

            timestamp = datetime.fromtimestamp(timestamp)

            print(timestamp.strftime('Timestamp:        %Y-%m-%d %H:%M:%S'))

        else:
            raise ProgramError(f'Unknown HEADER tag: {tag}')

    print('')

    if header_digest_algorithm is None:
        raise ProgramError(f'Missing HEADER_DIGEST_ALGORITHM')

    if header_digest_algorithm not in (DIGEST_SHA1, DIGEST_SHA512):
        raise ProgramError(f'Unsupported HEADER_DIGEST_ALGORITHM: {header_digest_algorithm}')

    if header_signature_index is None:
        raise ProgramError('Missing HEADER_SIGNATURE')

    if certificate_file is None:
        print('No certificate specified, unable to check signature')
        return

    try:
        with open(certificate_file, 'rb') as file:
            content = file.read()

    except (PermissionError, FileNotFoundError, IsADirectoryError) as error:
        raise ProgramError(f'{error.strerror}: {error.filename}')

    try:
        certificate = x509.load_pem_x509_certificate(content, backends.default_backend())
    except ValueError:
        raise ProgramError(f'No certificate in file: {certificate_file}')

    public_key = certificate.public_key()

    if header_digest_algorithm == DIGEST_SHA1:
        hash = hashes.SHA1()
    elif header_digest_algorithm == DIGEST_SHA512:
        hash = hashes.SHA512()

    signature = tlv_data[header_signature_index + 3:header_signature_index + 3 + header_signature_length]
    content = tlv_data[:header_signature_index] + tlv_data[header_signature_index + 3 + header_signature_length:]

    try:
        public_key.verify(signature, content, padding.PKCS1v15(), hash)

    except InvalidSignature:
        print('Invalid signature')
        return

    print('Valid signature')


def remove_sgn(sgn_file):
    try:
        with open(sgn_file, 'rb') as file:
            tlv_data = file.read()

    except (PermissionError, FileNotFoundError, IsADirectoryError) as error:
        raise ProgramError(f'{error.strerror}: {error.filename}')

    tlv_index = 0

    (tag, length) = struct.unpack_from('> B H', tlv_data, tlv_index)
    tlv_index += 3

    if tag != HEADER_VERSION:
        raise ProgramError(f'Tag is not HEADER_VERSION: {tag}')

    if length != 2:
        raise ProgramError(f'Unsupported length for HEADER_VERSION: {length}')

    tlv_index += length

    (tag, length) = struct.unpack_from('> B H', tlv_data, tlv_index)
    tlv_index += 3

    if tag != HEADER_LENGTH:
        raise ProgramError(f'Tag is not HEADER_LENGTH: {tag}')

    if length != 2:
        raise ProgramError(f'Unsupported length for HEADER_LENGTH: {length}')

    (header_length,) = struct.unpack_from('> H', tlv_data, tlv_index)
    tlv_index += length

    # Remove .sgn or .sha512
    if sgn_file.endswith('.sgn'):
        output_file = sgn_file[:-4]
    elif sgn_file.endswith('.sha512'):
        output_file = sgn_file[:-7]
    else:
        raise ProgramError(f'File name must end in .sgn or .sha512: {sgn_file}')

    try:
        with open(output_file, 'wb') as file:
            file.write(tlv_data[header_length:])

    except (PermissionError, FileNotFoundError, IsADirectoryError) as error:
        raise ProgramError(f'{error.strerror}: {error.filename}')

    print(f'Wrote {output_file}')


oid_names = {
    oid.NameOID.COMMON_NAME: 'CN',
    oid.NameOID.ORGANIZATION_NAME: 'O',
    oid.NameOID.ORGANIZATIONAL_UNIT_NAME: 'OU',
    oid.NameOID.LOCALITY_NAME: 'L',
    oid.NameOID.STATE_OR_PROVINCE_NAME: 'ST',
    oid.NameOID.COUNTRY_NAME: 'C'
}


def build_sgn(input_file, certificate_file, digest_algorithm, filename):
    try:
        with open(certificate_file, 'rb') as file:
            content = file.read()

    except (PermissionError, FileNotFoundError, IsADirectoryError) as error:
        raise ProgramError(f'{error.strerror}: {error.filename}')

    try:
        certificate = x509.load_pem_x509_certificate(content, backends.default_backend())
    except ValueError:
        raise ProgramError(f'No certificate in file: {certificate_file}')

    try:
        private_key = serialization.load_pem_private_key(content, None, backends.default_backend())
    except ValueError:
        raise ProgramError(f'No private key in file: {certificate_file}')

    header_signature_length = private_key.key_size // 8

    tlv_data = bytearray()
    tlv_data += struct.pack('> B H B B', HEADER_VERSION, 2, 1, 0)

    header_length_index = len(tlv_data)
    tlv_data += struct.pack('> B H H', HEADER_LENGTH, 2, 0)

    signer_name = ''

    for attribute in certificate.subject:
        if attribute.oid not in oid_names:
            continue

        signer_name += (';' if len(signer_name) else '') + oid_names[attribute.oid] + '=' + attribute.value

    signer_name = signer_name.encode('utf-8') + b'\x00'
    ca_name = ''

    for attribute in certificate.issuer:
        if attribute.oid not in oid_names:
            continue

        ca_name += (';' if len(ca_name) else '') + oid_names[attribute.oid] + '=' + attribute.value

    ca_name = ca_name.encode('utf-8') + b'\x00'

    serial_number = certificate.serial_number
    serial_number = serial_number.to_bytes((serial_number.bit_length() + 7) // 8, byteorder = 'big')

    signer_id = 3 + len(signer_name) + 3 + len(serial_number) + 3 + len(ca_name)
    tlv_data += struct.pack('> B H', HEADER_SIGNER_ID, signer_id)

    tlv_data += struct.pack('> B H', HEADER_SIGNER_NAME, len(signer_name))
    tlv_data += signer_name

    tlv_data += struct.pack('> B H', HEADER_SERIAL_NUMBER, len(serial_number))
    tlv_data += serial_number

    tlv_data += struct.pack('> B H', HEADER_CA_NAME, len(ca_name))
    tlv_data += ca_name

    tlv_data += struct.pack('> B H', HEADER_SIGNATURE_INFO, 15)
    tlv_data += struct.pack('> B H', HEADER_DIGEST_ALGORITHM, 1)

    if digest_algorithm == 'sha1':
        tlv_data += struct.pack('B', DIGEST_SHA1)
    elif digest_algorithm == 'sha512':
        tlv_data += struct.pack('B', DIGEST_SHA512)
    else:
        raise ProgramError(f'Unsupported HEADER_DIGEST_ALGORITHM: {digest_algorithm}')

    tlv_data += struct.pack('> B H', HEADER_SIGNATURE_ALGORITHM_INFO, 8)
    tlv_data += struct.pack('> B H B', HEADER_SIGNATURE_ALGORITHM, 1, 0)
    tlv_data += struct.pack('> B H', HEADER_SIGNATURE_MODULUS, 1)

    if header_signature_length == 64:
        tlv_data += struct.pack('B', 0)
    elif header_signature_length == 128:
        tlv_data += struct.pack('B', 1)
    elif header_signature_length == 256:
        tlv_data += struct.pack('B', 2)
    elif header_signature_length == 512:
        tlv_data += struct.pack('B', 3)
    else:
        raise ProgramError(f'Unsupported HEADER_SIGNATURE_MODULUS: {header_signature_length}')

    header_signature_index = len(tlv_data)

    filename = filename.encode('utf-8') + b'\x00'

    tlv_data += struct.pack('> B H', HEADER_FILENAME, len(filename))
    tlv_data += filename

    tlv_data += struct.pack('> B H I', HEADER_TIMESTAMP, 4, int(time.time()))

    # Pad to 4 byte boundary
    while (len(tlv_data) + 3 + header_signature_length) % 4:
        tlv_data += struct.pack('B', HEADER_PADDING)

    header_length = len(tlv_data) + 3 + header_signature_length
    struct.pack_into('> H', tlv_data, header_length_index + 3, header_length)

    try:
        with open(input_file, 'rb') as file:
            tlv_data += file.read()

    except (PermissionError, FileNotFoundError, IsADirectoryError) as error:
        raise ProgramError(f'{error.strerror}: {error.filename}')

    if digest_algorithm == 'sha1':
        hash = hashes.SHA1()
    elif digest_algorithm == 'sha512':
        hash = hashes.SHA512()
    else:
        raise ProgramError(f'Unsupported DIGEST_ALGORITHM: {digest_algorithm}')

    tlv_data = bytes(tlv_data)
    signature = private_key.sign(tlv_data, padding.PKCS1v15(), hash)

    content = tlv_data[:header_signature_index]
    content += struct.pack('> B H', HEADER_SIGNATURE, len(signature))
    content += signature
    content += tlv_data[header_signature_index:]

    sgn_file = input_file + '.sgn'

    try:
        with open(sgn_file, 'wb') as file:
            file.write(content)

    except (PermissionError, IsADirectoryError) as error:
        raise ProgramError(f'{error.strerror}: {error.filename}')

    print(f'Built {sgn_file}')


def main():
    try:
        short_options = 'pbrt:d:F:H'
        long_options = ['parse', 'build', 'remove', 'tftp=', 'digest=', 'filename=', 'help']

        mode = None
        sgn_file = input_file = None
        certificate_file = None
        digest_algorithm = 'sha1'
        filename = None
        help = False

        try:
            options, arguments = getopt.gnu_getopt(sys.argv[1:], short_options, long_options)
        except getopt.GetoptError as error:
            raise ProgramError(error.msg[0].upper() + error.msg[1:] +
                               '. Try \'' + os.path.basename(sys.argv[0]) + ' --help\' for more information')

        for option, argument in options:
            if option in ('-p', '--parse'):
                mode = 'parse'

            elif option in ('-b', '--build'):
                mode = 'build'

            elif option in ('-r', '--remove'):
                mode = 'remove'

            elif option in ('-t', '--tftp'):
                certificate_file = argument

            elif option in ('-d', '--digest'):
                digest_algorithm = argument

                if digest_algorithm not in ('sha1', 'sha512'):
                    raise ProgramError(f'Invalid digest: {digest_algorithm}')

            elif option in ('-F', '--filename'):
                filename = argument

            elif option in ('-H', '--help'):
                help = True

        if help:
            print('Usage: ' + os.path.basename(sys.argv[0]) + ' [OPTIONS] {SGN-FILE | FILE}\n'
                  'Parse, build or remove (unsign) .sgn files\n'
                  '\n'
                  '  -p, --parse                    parse the specified .sgn file\n'
                  '  -b, --build                    build new .sgn file using options below\n'
                  '  -r, --remove                   remove (unsign) a .sgn file\n'
                  '  -t, --tftp CERT-FILE           signing certificate with tftp role\n'
                  '  -d, --digest ALGORITHM         digest algorithm for signature: sha1 or sha512 (default sha1)\n'
                  '  -F, --filename NAME            file name to store in .sgn header\n'
                  '  -H, --help                     print this help and exit\n')

            return

        if mode is None:
            raise ProgramError('No mode specified (either parse, build or remove). Try --help')

        if len(arguments):
            sgn_file = input_file = arguments[0]

        if mode in ('parse', 'remove'):
            if sgn_file is None:
                raise ProgramError('No .sgn or .sha512 file specified')

            if mode == 'parse':
                parse_sgn(sgn_file, certificate_file)
            elif mode == 'remove':
                remove_sgn(sgn_file)

        elif mode == 'build':
            if input_file is None:
                raise ProgramError('No file specified')

            if certificate_file is None:
                raise ProgramError('No certificate .pem file specified')

            if filename is None:
                filename = os.path.basename(input_file) + '.sgn'

            build_sgn(input_file, certificate_file, digest_algorithm, filename)

    except ProgramError as error:
        print(str(error), file = sys.stderr)
        exit(1)

    except Exception:
        traceback.print_exc(file = sys.stderr)
        exit(1)

    exit(0)


if __name__ == '__main__':
    main()
